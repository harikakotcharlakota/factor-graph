#include <iostream>
#include <memory>
using namespace std;


#include <variable.h>
#include <gaussian.h>
#include <gamma.h>
#include <mixture.h>
#include <network.h>
#include <discrete.h>
#include <ostream>
#include <ctime>



using namespace vmp;



const double MIX_DATA[] = {
// mixtures,
0.019209,-0.005372,-0.098024,-0.018035,0.096218,0.060276,-0.227076,0.128158,0.035287,0.267884,-0.157314,
    -0.102112,-0.247797,0.000511,0.140735,-0.067736,-0.073412,-0.041671,-0.022705,0.144747,0.002248,-0.068258,
    0.089757,-0.192961,0.189302,-0.065300,0.676527,-0.205173,0.133952,0.037272,-0.341772,0.276866,-0.704012,
    -0.615414,-0.414130,0.412874,0.311158,-0.395723,-0.056843,-0.235086,0.073758,0.664504,-0.277226,0.616261,
    -0.147132,-0.206154,0.192782,0.224245,0.088479,-0.464050,-0.218614,-0.274482,-0.162069,-0.247317,0.134646,
    0.319877,-0.079268,0.175265,0.239979,0.042325,-0.086192,-0.171594,-0.367806,-0.086494,0.050440,-0.059042,
    0.068907,0.014622,0.211975,-0.199382,-0.037445,0.076548,5.881072,6.088684,5.438869,6.145015,6.146041,5.999624,
    5.888391,5.863076,5.460903,6.346496,6.201049,5.656202,5.532848,5.878173,6.215299,6.263307,6.169055,6.242871,6.554944,
    5.461049,6.148472,5.982828,5.763185,6.226661,5.998257,6.379509,5.673015,5.731976,6.137060,5.719340,6.038337,
    5.872907,6.346800,6.138089,5.871294,5.798028,5.871965,6.757006,5.984308,5.935940,5.937534,6.479501,5.452228,
    6.351795,5.772543,5.913554,6.214214,5.703868,
};

//const size_t MIX_NUM_POINTS = sizeof(MIX_DATA) / sizeof(double);
const size_t MIX_NUM_POINTS = 120;





void trainUnivariateGaussian()
{
//    const double DATA[] = {10.748077,9.807581,10.888610,9.235151,8.597731,8.577624,10.488194,
//                           9.822625,9.803947,11.419310,10.291584,10.197811,11.587699,9.195534,
//                           10.696624,10.835088,9.756285,10.215670,8.834156,8.852047};
    const double DATA[] = {-0.371482,1.763169,-3.592885,-2.263371,-2.180174,-2.290550,4.786776,3.460986,-1.239315,0.883568,-3.307443,-1.411931,-0.584617,0.610866,2.407795,1.234371,-0.039581,2.484930,-0.368116,1.309901,4.068510,-2.340014,-0.561350,-1.958976,-3.137285,1.980247,-0.922968,-3.403374,-2.048146,1.971006,1.293586,0.225300,-3.170316,-1.040818,-1.924622,2.677459,-1.324865,1.702337,3.390877,2.674503,1.243590,-2.579183,4.648140,-2.643176,-1.372459,-0.032691,1.493348,0.546879,-1.606135,-1.989330,-3.003583,-0.762470,-0.575882,-0.280852,-0.762253,1.006738,-0.281002,-1.173300,-0.553786,3.279227,0.130098,2.122636,-0.760417,-1.402654,2.786444,1.223887,-1.206717,2.751657,-0.472743,-0.132738,-0.100814,-0.310268,0.567080,-2.861579,1.098186,-4.913730,-0.034146,-2.247670,0.914314,-2.019998,1.736005,-1.405238,-1.885453,0.544730,-0.728637,-1.052804,-1.109705,1.694434,-0.985331,-0.226260,-1.191880,-0.353133,-1.576490,1.031621,0.529271,1.694577,0.506751,0.653896,0.381374,3.094774,-0.253906,-0.719364,0.559938,-0.801038,-2.648231,-1.190609,-1.114998,0.938768,1.064644,-0.416468,0.465876,-1.781925,-0.196280,-0.610991,1.384971,1.727869,-1.097875,-3.860251,0.121484,2.337817,2.228923,1.254376,1.984625,-1.862445,-2.513737,0.918395,-0.308241,-2.371610,1.411712,2.760486,0.521542,0.560265,0.248306,-1.415021,0.040887,1.710727,-2.285522,1.907401,2.512265,-0.172594,-0.229801,2.741772,0.947711,0.889068,-0.299504,-1.632313,-0.902661,0.835239,-1.835273,-0.061495,-1.472088,-2.681902,3.260009,1.739056,-0.412499,2.294473,0.166150,0.944392,0.858649,0.604251,0.026283,-0.021948,-1.446673,2.356775,-0.596125,-0.083565,-2.146766,0.062623,3.000449,-2.225066,1.442353,-2.929414,1.072105,3.076098,0.248153,-2.310207,3.437751,-2.100067,-1.345942,0.876221,0.750115,-0.153482,0.506180,0.874845,-0.337748,0.531390,-0.740997,-1.040341,-1.021906,0.157896,-2.019997,-1.397057,-0.241008,0.715252,-0.409099,-0.004906,-1.259595,-3.042804,-1.207505,-1.184861,2.860648,2.048629,1.019360,2.445551,0.164047,-1.137807,1.716640,-1.356715,-1.561370,1.084780,-1.163380,-2.084242,-1.573979,-1.274658,-2.742673,-1.484435,1.053999,4.329933,-1.174550,1.197230,3.560127,-0.031669,-0.758965,0.419892,0.415736,-1.645207,0.227391,-1.185384,-2.194413,0.237019,1.798172,1.195512,0.003493,1.405497,2.158316,-0.281593,-0.655606,1.423308,-0.016746,3.737303,-2.591913,-2.986896,-2.125565,0.277569,-0.116190,-0.476164,1.872084,-0.304953,1.032334,3.254912,2.316294,-0.975357,4.439650,1.943970,0.463258,-2.129563,3.405782,-0.223194,-0.227710,0.058759,0.452055,4.425602,2.705077,-0.160682,3.178901,-0.703405,-2.133488,-0.911272,-1.214119,-0.249367,-0.137371,1.652387,-1.409987,2.000443,-0.612748,1.023637,3.677365,0.271897,1.003083,-1.387786,0.464002,-1.577340,-0.343285,-1.415262,0.180806,-1.761856,1.714230,0.527604,-2.565532,-3.918892,-3.009678,-1.867508,-0.022240,0.766658,-2.419943,-3.585613,-0.996601,-3.418379,-0.479340,-2.312888,0.889397,-1.278100,0.132807,-1.929907,3.469930,0.171781,-0.553807,-2.653083,0.680313,-2.188923,-2.335416,-1.414677,-1.330475,-1.244258,3.321203,1.296287,2.712492,-5.358081,-0.553226,-0.299684,-0.645711,3.297118,-1.034780,-1.620557,0.635953,-2.490146,3.254527,2.019742,4.661369,1.108538,0.409143,2.477207,0.270521,-0.038919,-1.887915,-1.548391,-0.074085,1.323839,1.956827,-1.309917,-0.945220,-1.768222,-2.497030,0.584803,-0.596909,2.671970,-0.862382,1.748006,-1.023341,0.903228,2.460906,-0.371280,0.435435,-5.266383,-0.942855,0.399822,0.220653,3.324425,0.681156,-0.003289,1.044198,-2.585339,-0.935694,0.993164,-0.465862,-4.787580,1.446166,-2.736837,-2.525424,0.851270,-0.485957,-1.558761,-3.159265,-1.244620,-4.374539,0.709484,-0.150654,-2.611370,-0.394788,5.874102,0.446468,0.796916,3.220400,0.772323,0.019416,0.145001,0.638388,2.141723,0.601664,2.344377,-0.218830,1.654484,-1.039656,1.706053,-2.350240,-0.908801,-1.012218,3.607385,-2.025496,-2.480578,0.533130,-2.415505,-2.100145,0.937332,0.565800,2.682394,0.761195,2.870861,1.599176,3.257121,0.258214,-4.169528,-1.294229,-0.503464,0.380433,-0.935085,1.061479,0.489312,3.892857,-2.554108,0.014915,-0.726911,2.533672,1.076075,1.613649,-0.222943,1.825784,3.049263,-1.384730,-1.804950,0.140788,-1.376934,2.461803,-0.549118,-2.207199,0.162391,-1.571499,-2.927103,0.793690,-1.128574,0.756323,2.340983,-0.091624,-1.270122,0.662767,1.764376,0.837089,-0.081097,-0.140287,-2.029305,-0.267493,-0.081601,1.205537,1.564521,0.429277,-1.619558,-2.770522,0.181748,-0.428044,0.301736,-4.710836,1.240276,0.621244,-0.181561,-0.793846,1.189353,0.440386,-1.433010,0.023484,-1.910008,-1.556686,3.057521,-3.736694,-2.441909,5.300315,0.189850,0.792467,2.715074,-3.882293,3.521176,2.120481,-2.093582,-0.544052,0.873733,-1.731573,-1.280041,-1.038550,-0.296965,-1.301729,1.199346,0.188188,2.762470,-1.509656,1.935035,1.077913,1.286180,-0.182373,-0.165379,-2.670225,2.346560,-0.380279,0.791338,1.489431,-0.501266,0.330760,-0.870596,2.341638,-1.818361,2.602898,2.082743,2.950452,0.573374,2.892338,-0.120006,-0.316941,-0.849674,0.909442,-0.829651,-0.117109,-0.506315,-0.426394,-4.254193,-0.471066,-3.416399,0.644525,1.479733,-1.394810,1.383408,0.855790,0.024780,3.511852,1.543363,-0.062250,1.402537,1.299686,3.368657,-2.779611,1.458075,0.407556,-1.808271,-3.316867,-1.781847,-0.191552,0.817009,1.347717,-0.634690,-0.462444,1.350344,1.662503,2.404380,-3.796190,-2.414901,0.572265,2.102504,-1.791497,-0.580122,-0.911791,-0.134609,-0.905588,1.515023,-3.100414,4.042529,-2.727426,2.017550,2.314859,-0.333136,0.359871,-0.897703,1.570168,0.640984,0.461918,1.719505,-0.169810,2.402986,-0.046655,1.387169,0.153398,1.030054,0.362286,1.177633,-0.839208,2.396616,-0.675333,0.735431,-2.271610,2.761260,1.692221,-0.599725,-1.772689,-0.755450,0.764020,0.858103,1.350255,-1.102903,0.083275,-0.335267,-1.231811,1.673510,0.720318,-0.679293,-0.797727,-0.056262,-1.390443,-1.787963,-0.140462,-0.788576,-0.583109,0.894676,3.508365,-1.631511,3.742658,0.269120,-1.352869,1.298940,0.784325,-1.083062,0.253162,-2.867200,-5.122218,0.608301,-2.166500,1.269600,1.205830,2.036433,1.292112,1.542870,-0.555662,4.481503,0.535589,0.799172,2.638948,-2.086764,6.063063,-2.432206,2.853936,2.670983,-1.335276,-3.943033,-1.827712,0.320072,0.929519,0.631606,-0.941586,-0.116638,3.579862,0.859038,-0.421818,0.037597,1.914023,-0.635050,1.673482,-1.606177,-1.421856,-1.601383,-3.632561,2.858097,2.478588,-1.369809,1.054551,2.709391,-1.710369,-1.956568,-0.828733,1.952564,0.572455,-0.320103,2.202882,-2.193058,-2.097231,0.037677,0.745637,0.627563,-1.888180,-0.818241,-0.508873,0.379160,0.304412,0.439454,-1.492087,1.124083,2.099425,-0.397590,-0.688698,1.009695,-1.653960,3.477102,-1.575174,0.044701,-1.566820,-0.898301,-0.311916,2.044645,-0.820219,-0.064299,-0.321897,2.400039,-4.021126,1.129544,0.155590,-2.915831,0.057775,-0.146707,-0.054444,1.233076,0.029953,1.381336,3.438115,1.390958,-0.241733,-1.415544,3.683634,-0.763500,2.098010,1.710695,1.351951,0.779792,-1.137319,1.538689,-0.229892,0.039418,-0.064836,-0.905295,-2.382114,-0.837047,2.475418,4.008500,-0.079956,1.266283,0.866532,-3.308506,0.376368,-1.823697,-3.183224,-1.402369,3.362626,0.182438,-2.148767,1.432339,0.983390,-0.618932,1.118676,-0.568676,-2.549163,-2.515771,-0.273200,-1.916716,-1.048349,0.106046,0.289605,-3.131019,0.626401,-0.186187,1.288425,1.710673,-2.633553,1.269643,0.315184,2.602159,0.376801,-1.477535,-4.092700,-2.037942,-2.415868,0.309371,-2.693428,-2.797863,0.283756,3.812065,-1.735319,-3.192687,-4.640375,-1.771348,1.082305,-0.346204,0.043454,1.356174,2.928450,-3.855284,-0.861784,-1.460999,-1.359711,-5.147439,-2.611930,2.402312,1.374047,0.182248,1.426832,-2.745065,-0.311901,-0.745188,1.498719,2.962829,-1.747892,2.170857,0.112773,2.558310,1.970751,-1.865443,3.830121,-2.878326,0.429750,3.163779,-3.009917,-0.668423,-0.774326,0.319859,1.166501,-0.569272,0.877111,4.350094,3.108958,3.461144,1.094238,-1.379863,0.742134,1.358167,2.067698,1.515758,-1.202458,-2.582875,-2.721940,-1.095585,1.013432,3.095252,-0.189211,1.846782,-2.450191,2.677212,0.153925,2.485943,1.274171,-1.291807,-1.947320,-4.616019,-0.229612,-0.298386,-0.790360,1.829223,-0.024351,1.377985,1.521871,0.541984,-1.771462,1.147990,-0.851694,-2.899968,1.947961,4.892230,-1.597737,0.032269,2.464699,-4.263135,-3.847989,-0.493220,2.095351,6.775304,6.424783,2.033143,1.282157,-1.144520,-3.564825,-0.195384,0.356542,0.195689,3.314163,0.222757,3.203551,1.540172,1.615285,-2.810259,1.588258,1.313924,-1.397926,0.765435,0.907799,1.102882,1.445529,2.339675,0.161283,1.085729,0.021443,1.971954,-1.194464,2.106072,-2.430753,1.768796,-0.276970,0.617113,-0.684978,-0.253647,0.632952,1.736046,1.771081,0.703944,2.508759,0.748174,2.440200,3.795068,-2.357899,-2.255972,2.498488,-0.303104,0.954345,3.129983,-1.277280,-1.945288,0.180892,0.376830,1.045712,1.009369,-2.850841,-0.406812,-0.481299,-4.685793,-2.630153,1.543925,-2.201238,0.485475,-3.518054,0.589375,1.763066,2.283650,-0.870553,-1.960390,1.568508,-0.089604,0.114992,2.457834,3.652559,-1.750262,-0.978664,0.169778,1.342424,2.684392,1.135407,-0.857098,2.004745,1.163023,-0.324056,1.187480,0.403439,3.647030,-0.501651,2.533981,2.372676,-1.066128,1.360602,1.796894,3.274583,-2.593196,-1.612390,0.321770,-4.732441,-3.053008,-3.616644,1.399579,-1.260509,6.004100,1.623048,1.629466,-0.319793,-0.625409,1.629564,2.359936,2.918564,2.750519,2.185184,-0.049569,-0.052263,-1.758298,-0.268878,0.785124,-2.782497,-0.816776,-0.815198,0.187499,-0.653862,-0.646200,-2.617623,-2.317513,-2.588995,0.616736,0.864751,-3.746050,-2.247003,-0.738586,1.086415,0.418209,1.721074,-2.705391,-1.312168,-2.702094,0.179207,-1.629422,1.524539,-3.378804,0.161365,-4.324621,-1.818309,-0.157357,0.796293,0.664267,-3.515741,0.945116,1.598969,-1.596783,2.032124,-1.124695,-1.695592,0.373990,1.313642,0.924707,0.595519,1.183119,-0.620994,1.372648,1.244516,-3.120301,-1.158151,1.888147,-0.723146,-1.231937,-0.513827,1.856597,-2.512871,1.561703,1.599941,1.019808,-1.302227,-2.258089,1.820939,0.820383,0.244326,0.361824,0.815733,0.731624,2.394185,1.325371,0.174946,1.958260,3.793319,0.504361,1.977246,-2.182189,2.298285,-1.135135,-0.673894,1.368255,-0.814344,-4.359206,-3.970411,-2.770339,1.092427,-0.996199,-0.664492,-2.150925,3.756480,-0.483618,-1.613149,0.516949,-3.143585,-1.044403,0.197965,4.179424,0.597456,0.626861,1.557170,2.079258,-1.070868,0.713820,-3.389575,0.949192,-2.264413,-0.324063,0.412228,-1.691167,2.553275,-1.031026,-1.263858,1.356358,2.637224,0.354895,-2.105256,2.083693,-1.508509,-4.050716,-1.987626,3.083481,4.119266,0.431189,0.184905,-3.560299,-3.593115,1.499956,-0.499414,-1.560973,-1.044464,-0.945549,-0.248158,-2.185717,0.418076,0.556637,1.650501,-1.004605,3.177717,-0.662893,1.073641,-0.914800,3.414676,-0.953472,1.856258,-0.712814,1.889803,2.182320,-0.319511,-0.667990,-1.124122,-0.381603,-0.865126,-3.760550,-0.542754,0.582765,-1.505514,-1.288047,-1.213680,-0.079883,-1.636877,-2.489788,3.086460,-1.114799,1.083269,-2.343830,3.952758,0.018521,2.329835,1.542537,-0.016637,0.629553,-1.244131,0.226055,1.711657,-1.071028,-1.139696,-0.409686,1.520874,-1.970212,-2.102094,-0.581772,-0.529682,1.380260,2.154784,-2.133056,-3.809213,-3.141580,-2.396571,-2.578785,-0.175048,-0.825209,3.210121,1.476207,-0.052111,-2.477512,0.314000,0.692659,0.889175,-0.735235,-2.003300,3.135939,-1.099156,0.086873,1.387046,0.052721,-1.535086,3.271291,-5.573095,0.940811,3.011698,-0.267808,-0.226224,-1.234990,4.863839,3.244546,-0.066768,-0.508347,-1.637249,3.074931,-3.212972,-1.732435,-0.876730,-2.179173,-2.441550,1.414868,-0.139728,-0.972624,-0.513245,-0.213967,-1.897739,-0.422565,-1.720624,1.617464,0.978492,-0.694378,0.662325,-1.703439,-1.221298,-1.242354,0.414096,0.106868,-4.055957,-1.960573,-0.975985,-0.430514,-1.026892,1.308788,2.591737,2.014283,0.773893,2.165066,2.365237,1.109656,3.991158,-0.505730,0.696041,-0.910227,-1.271415,-1.959713,-1.522984,-2.567094,-0.602501,-1.414464,3.114052,1.055867,-3.868524,2.337383,-1.068364,-3.155853,1.062343,2.450230,0.583372,0.807851,-1.596625,-0.298984,-0.196622,-0.462080,1.466382,-1.545964,-0.644611,-0.895038,0.830012,2.518174,3.552816,4.183215,-2.009133,-1.462252,3.884202,0.750720,-1.105576,2.802351,-3.107441,-0.927954,-1.875446,2.237874,3.913613,1.483769,2.994197,3.127001,1.393209,-1.017009,1.815808,0.660120,-2.239951,-1.117032,2.991697,-2.305050,0.647597,-1.522702,1.119995,-1.968484,-2.513270,0.443467,-1.772211,2.618469,1.042280,-0.682444,-0.693122,-3.996475,-0.021025,4.367644,0.615501,-2.048719,0.669449,1.457509,-2.645688,1.053571,2.856321,0.456302,-0.601056,-2.028616,0.140255,-2.021822,-0.664119,-0.833001,-0.094611,0.931022,-0.842586,0.139261,-3.427573,2.004672,-1.982769,-0.561432,0.339736,1.789796,-1.602044,0.053645,-1.175522,-2.174083,-0.072670,-0.341115,-0.081433,-2.060955,-1.028945,0.666291,1.389039,-0.540862,3.980224,-2.032783,-2.681288,3.269536,-1.854846,-0.378183,-1.982945,-2.346901,-1.546943,-0.325765,-0.895480,1.734416,-0.837009,2.538247,-1.644768,-3.119063,0.589784,2.640588,-0.465530,2.470739,-0.486902,-1.265388,-2.476822,2.141445,-2.591613,-0.652466,-1.558597,-1.546428,-0.567371,0.286656,0.472070,-1.688901,0.681583,1.029985,-0.280478,-0.454492,-2.418432,0.620678,3.292312,1.498286,-0.229996,1.152971,0.370191,1.145759,0.246533,0.019122,3.179661,0.246343,1.276833,1.556050,2.653915,-0.311287,1.256950,0.131189,-0.965912,-0.204495,1.208663,-1.494287,3.166547,3.767616,-1.458074,-0.693802,0.923240,0.805757,2.769973,-0.142799,3.188461,-1.670005,0.160695,0.646979,-1.933790,0.118377,-0.530349,1.715385,1.091372,3.707504,1.992193,0.205783,-3.836764,-0.262136,-1.537263,4.779904,0.154491,0.751215,0.791128,-0.224998,-3.658073,4.182904,0.718186,-1.588689,-0.454623,3.187643,0.310411,0.357191,-0.675462,-3.049984,-1.418813,-1.733233,0.142962,0.311241,-0.364383,1.462032,-0.695136,0.468848,-1.735459,-1.965077,-0.587145,1.648939,0.388266,0.595383,-1.420250,-1.375348,1.145676,0.890435,-2.651919,-2.999751,2.031936,-0.055032,-0.320891,0.757670,-0.214321,0.425670,0.936128,-3.232149,0.029476,-0.075529,0.807618,0.610509,-2.486220,0.263718,-1.998950,-0.708427,0.211177,1.910853,0.929598,0.533413,-2.846447,0.222115,2.345711,-4.231167,0.924322,-4.919806,-0.609714,0.796467,-3.411573,1.518820,0.406475,1.917366,0.973659,-0.891809,0.651346,-0.040196,-3.776951,0.676723,0.675611,0.848662,0.225742,-0.236541,-5.372572,3.096712,-1.848757,-1.440810,1.667011,-1.132984,-1.998302,1.282534,-0.507900,-2.243400,3.295854,-0.613355,-1.548083,-2.708479,-0.651854,3.106433,1.256262,-2.055092,-0.403885,1.722132,3.116315,-0.259362,-1.635545,0.577013,-2.262758,1.762634,-1.888427,-1.243184,-3.982105,-1.903907,0.515898,2.396394,2.217934,-3.225333,-0.713259,-0.017233,-0.029228,0.434175,0.360381,-1.041033,-0.479164,-1.386030,-1.369822,1.865206,-2.417102,-0.721571,-2.364739,1.289315,-2.177666,-3.396949,-2.580719,1.091253,4.270699,-1.153717,1.650378,3.226208,2.431844,3.227823,-1.199878,2.080160,-0.488814,-2.970133,-0.712357,0.709047,3.669826,1.795385,0.504605,1.968056,-1.029122,-2.621307,-1.374631,-2.370929,1.964777,-0.270693,-2.380080,-0.414619,-1.691230,-0.628590,2.848561,2.982954,-1.488097,-0.748754,0.848214,0.228231,-1.022196,2.044674,-2.838368,5.093359,-0.715911,0.802637,-1.412390,-2.041327,2.267922,0.077091,0.461825,0.251467,1.392571,3.478947,1.330755,1.375064,2.477937,1.797326,-2.300196,-0.528361,-3.250361,1.163285,3.804985,3.160189,1.842058,-1.875805,-1.474372,0.359562,-0.263661,1.735854,2.628784,-0.502239,-0.143519,2.190417,0.978561,-3.360307,-1.623051,-1.504450,-2.651838,-0.362962,0.262831,2.787660,1.412427,2.325694,-1.507375,0.643849,3.271408,-1.295589,1.346527,2.547111,-2.079624,0.975900,-1.813507,-0.949406,-1.332173,-1.004039,-0.617772,-1.673803,-1.256648,1.001807,3.340507,-3.083460,-0.544018,0.683293,0.968734,1.905368,0.262700,-3.483827,1.335523,1.796312,-1.098631,-0.635001,-1.165387,-0.328422,-1.870267,2.376215,-2.425577,-0.762357,2.645307,0.770693,-0.723644,-0.852753,0.774276,1.805554,1.435551,3.472161,-2.017666,-0.360079,-4.053095,0.817876,1.468650,0.163935,-3.373034,-4.123423,3.641874,-2.498263,1.872632,-0.343117,-0.156738,-1.220738,1.137751,-0.314394,-2.137012,-0.625044,-0.034246,-0.264665,0.889371,0.803477,-5.028380,-1.576985,-0.228033,0.948274,1.369832,1.079541,-0.760898,2.886113,-1.618598,-2.942462,0.850844,1.928385,1.940833,1.044627,1.749558,0.316133,3.131377,2.705516,0.185056,1.565047,2.220049,2.999893,-0.264762,2.515599,2.186586,1.950443,2.400572,-0.214567,1.238998,2.181937,-0.884070,-2.561586,1.317567,0.402059,0.900039,-0.026138,-1.692964,0.965437,1.866242,0.583401,-0.426787,-0.081411,-0.456057,-2.762210,0.530128,2.124146,0.117096,-1.129201,1.325302,2.418148,0.909643,0.987143,0.443241,-1.149288,0.264540,2.257280,-0.112012,1.412532,-0.121102,1.180497,-1.239214,-2.380560,-4.870712,1.464011,0.693625,1.456174,1.142319,-3.555149,0.206758,3.869695,1.861346,-0.301669,-0.936398,-0.730573,0.516269,0.370720,-1.789130,-0.908849,-0.566032,2.193003,2.035594,0.605110,-2.521855,0.480302,1.566876,-0.386040,-2.614020,-1.531199,1.565107,-0.137325,0.766433,0.622858,1.504115,1.914384,0.883008,1.106292,0.734376,-2.289394,1.854968,2.095470,0.658191,-0.479348,-1.135673,-3.129220,0.059436,1.214356,1.920580,-0.251073,-0.965128,3.440820,3.423246,4.783905,-1.874484,-2.567683,0.325193,0.778061,1.369986,-0.983639,-0.397603,-0.616610,-3.941998,-1.644253,0.134647,-0.831257,1.683599,1.187014,0.598018,1.240652,4.109499,-0.503608,5.327176,3.715649,2.529423,-3.937685,-1.129831,-2.634428,0.404223,-2.116802,-0.879940,2.955773,-2.456517,-3.693368,-1.495208,-0.512616,1.367852,0.236425,-0.704692,0.469214,-2.276435,0.602064,2.073396,-0.040507,2.371263,-0.665244,2.039786,-2.691975,0.090500,1.139571,-2.096083,-2.953102,-1.182353,-0.518017,2.713674,-2.011300,2.088445,-0.518643,-1.238404,-0.702028,4.272397,-1.231993,3.027873,0.171108,-1.005199,1.411650,0.239387,-0.171389,0.964103,-0.951942,4.234081,0.198054,1.613342,2.033838,-1.866796,2.945010,1.969920,-1.493371,0.630818,-1.828662,2.460737,-0.053175,1.819434,0.118513,0.536057,-0.988430,-0.918274,-0.376022,4.851298,1.741090,1.123527,1.099420,4.796683,0.914642,1.310148,-1.226958,-0.037381,-2.076091,1.091724,-1.338797,2.729592,1.957702,-0.132537,-0.715757,-2.748868,1.701330,1.716310,-0.199106,4.208066,1.188371,1.203972,0.046242,1.537284,-1.485635,-0.192611,-1.990461,-2.462525,-3.675309,3.179505,-4.063697,4.710457,1.528089,-4.229305,-0.180707,1.769638,-1.376750,1.591439,-2.075494,0.196399,3.047453,0.748465,2.478014,0.131060,-1.360615,1.027113,0.107381,4.260234,-1.639202,0.197977,-2.923463,3.253996,1.320875,2.834209,-0.506461,0.900847,2.602731,-0.586635,1.138432,-2.811373,-0.586271,-0.239092,-1.400050,-3.154032,0.575168,0.480404,1.244890,1.937038,-1.749060,0.524571,0.290033,2.395100,1.849479,-1.567693,-3.630137,-1.623696,1.977860,-0.014765,-0.407438,-1.393486,-1.250048,0.926408,1.516260,1.012800,0.360035,2.338040,-0.360795,-0.032571,-1.959042,0.401217,-0.294952,-2.039753,1.110497,0.539992,4.122961,1.033455,1.035641,-0.352810,-2.184839,-2.372634,0.676735,3.067516,0.755596,1.906460,-0.980287,0.627124,-0.527610,-1.584365,1.488191,-0.561112,-6.433876,3.869538,-0.597516,0.765962,-0.908775,0.312918,-0.522528,-0.122896,-0.869790,-2.207331,-0.917564,0.588346,-0.389553,3.195345,6.190884,-1.511591,-1.744714,-2.105981,-1.951199,-0.224216,0.690845,0.309757,-2.613685,3.051423,1.917266,-1.972344,-0.474378,-0.971578,-0.122328,-1.279835,-1.430647,0.362828,-0.605189,-0.004348,-0.703041,-0.289739,0.428143,-1.308284,2.771163,1.210256,-5.510789,-1.325407,1.287851,1.871466,-2.852945,3.532725,-0.079503,-3.005251,-0.849926,-1.298577,3.140907,-4.382096,-1.614186,0.773697,1.485850,-3.249631,2.736049,-2.817679,-1.764333,-0.693119,1.685679,1.101461,0.010177,1.754641,-1.087082,3.144432,0.183892,-3.683116,-1.808134,-1.971296,-2.259657,1.321572,-2.415631,-0.000397,-0.243081,-1.547240,0.217580,-1.405329,3.695940,-3.020059,0.530209,-0.999426,-0.419007,-3.460759,1.683290,0.432180,2.191191,1.242210,-1.590980,-2.443675,-1.021672,1.039076,-2.209873,-0.489772,-4.371462,-1.968826,0.946899,1.632932,2.781841,0.839782,0.722506,-1.956574,-3.957650,1.989036,1.076052,0.891041,1.308443,-0.875974,2.245302,1.919721,-0.577190,-1.231886,-0.101233,1.338369,2.299750,1.978903,-3.785775,0.589194,-6.137747,-3.197559,-1.692635,0.088404,-0.115370,-0.245237,2.074303,0.234482,1.763343,-0.152281,-1.828855,-2.372628,2.399509,-0.831923,0.967887,-0.013025,-1.047530,0.921034,-1.684823,1.840586,2.556831,3.640743,1.351810,1.870969,1.576522,-2.016389,-0.230661,0.838287,-2.285944,-0.446954,-2.832822,-0.524599,0.456057,0.672239,1.366902,1.961450,-0.431063,1.922443,2.069919,-0.313820,0.221550,1.818845,-0.132129,-1.453515,-1.016763,-1.286913,-2.168192,2.465803,-4.170026,-0.184316,0.259251,0.412585,-0.426962,-3.053968,-1.088438,-2.055624,1.375113,-0.786558,0.951317,-0.126906,-1.118095,-1.470794,-2.773240,-1.598347,-1.222439,-0.220447,0.828517,0.460191,1.714062,0.096417,2.046697,-0.363986,-0.580257,1.630408,0.644665,0.276749,-0.902025,-0.306081,-1.758004,-0.385414,0.389771,3.189756,-0.883887,-0.843942,0.451618,0.292811,0.019380,0.215197,-4.099063,2.628060,1.236081,-0.838530,-1.309238,-1.380293,-3.358537,-0.496338,2.386710,-3.127146,-3.490378,-0.048189,-2.696379,-0.574411,-1.502530,0.863450,-0.862478,0.243710,0.841134,0.809701,0.967460,-0.586652,-4.938955,0.504418,-1.858345,1.063691,-2.652624,2.048050,-1.802529,-1.311633,0.796343,4.690623,-1.890589,3.579005,0.980872,-1.785873,1.528412,0.443634,-0.939877,-0.874211,-4.102794,-0.321585,1.061500,0.529048,-0.663872,2.130148,-0.792804,1.231693,-2.315533,-0.386077,0.572593,1.442438,0.077381,0.686290,2.512196,2.488372,-1.126246,0.469235,3.094682,0.333963,0.063001,2.837680,1.784072,-1.314130,0.007596,-2.248146,-0.497392,1.797340,-2.576189,2.043227,-0.768499,-1.394852,-1.468838,-4.259478,-0.188503,-2.304091,-3.358338,-0.009979,-1.174994,-0.798538,0.248418,0.328756,-0.700172,-0.570572,-0.795653,-0.512759,-1.870948,-2.614938,-2.250578,1.055725,0.010885,1.799727,2.359972,-1.527409,-2.113348,-3.721275,-0.422221,1.382596,2.996409,0.152146,-0.929582,0.440587,-1.643577,0.181191,-0.161697,-2.476921,-0.672855,0.925084,2.849334,1.100565,3.885036,-1.387243,0.370177,-0.333742,0.295032,-2.152611,-0.206820,-0.630718,-0.746524,-0.728504,-0.516547,0.017682,2.591774,-0.758148,-0.010671,-3.293883,0.372143,0.161503,-1.294008,0.740394,-0.573337,-0.542931,-2.258530,1.754595,-1.844564,0.215600,0.237852,1.436878,1.478160,-2.710518,2.581043,1.146839,-1.899109,-1.979378,-0.818975,-1.071671,1.931003,2.037286,0.422593,2.052723,0.219649,2.653223,2.437246,-2.537507,1.672581,0.735934,-0.439525,1.681775,-0.900173,-1.131692,1.132932,-0.211888,0.191172,2.294537,-0.991094,0.483418,1.535363,-2.330535,0.205781,-0.339257,0.914547,0.524115,0.058253,-1.642774,1.846748,2.985762,0.984682,1.690536,0.096470,-0.788854,0.361226,-3.105415,3.318515,1.861038,-3.665560,-2.625592,1.150760,-0.321976,-0.060885,-3.204271,0.250996,0.361090,1.270218,-2.945393,2.040564,-2.123212,0.121083,3.026647,2.659018,0.776419,2.123846,-2.305104,1.648134,1.827280,-2.058325,0.278021,5.716713,1.923576,2.489770,1.214103,-2.315658,-3.797815,-0.160382,-2.031544,-2.889071,-0.277258,0.864041,4.505987,-0.919161,0.180974,5.216270,-2.074338,0.506208,-0.533198,2.634968,0.223403,2.542873,0.823558,1.515833,-3.344670,-1.466971,-2.646429,-3.023129,1.822878,2.087752,-0.274078,-1.980790,2.088806,3.649318,1.406825,-1.644304,-0.898626,1.406419,0.124456,2.052873,-1.963829,3.072332,-0.575761,-1.422600,-2.349911,1.711545,-0.672353,-0.548377,-0.754590,-2.079465,-1.416796,-0.238377,4.338848,-0.753261,1.597372,-1.884056,1.746226,1.791996,1.431043,0.743205,-3.650402,-0.283193,1.202780,-3.618579,-0.837825,2.395094,0.067527,2.712619,-0.676657,2.477349,0.319603,1.356514,-2.883466,-2.959058,0.976702,-0.717419,-3.650362,-0.906132,-0.711101,-1.709539,-2.493645,0.443531,0.671265,-1.604980,2.647489,-0.974817,-3.961395,0.045806,1.627237,-3.795050,3.755028,-0.581336,-1.645763,0.567410,-1.078994,1.899474,2.655807,0.874770,-0.011020,-3.406658,-1.527586,0.043627,-3.996437,-2.107870,0.299009,-2.463811,-1.542462,0.602520,0.378858,0.237145,4.881786,1.341192,-1.359060,0.097057,2.320968,3.617445,1.369242,-1.556074,1.371100,1.136666,1.050549,-0.107357,-0.435734,0.193898,-1.197689,1.188758,-0.101373,2.663316,1.491279,0.452672,2.663007,1.736618,0.680096,-1.821196,2.665178,-0.252658,-0.703198,0.060286,2.136644,0.237150,-2.273179,-0.561698,-1.612420,-0.543602,-2.502648,0.711544,-0.689585,-1.767714,-1.162507,2.540882,-2.390151,0.972092,0.337898,-2.387244,0.080142,-1.850688,1.671759,1.102556,-0.234041,-1.978412,-1.039748,-0.996266,0.690797,2.492473,1.517367,-0.890217,-3.765972,-1.471778,0.705335,-2.122248,-0.010327,2.945240,3.250932,0.351635,3.539610,1.139652,1.417874,1.113120,-0.986085,0.392036,1.035483,2.371056,-5.142701,-1.707981,2.773320,1.303852,0.435612,1.045172,2.366559,-1.890573,0.822067,-3.761891,0.264170,0.192332,2.519968,-1.469475,1.090857,1.911614,-1.413413,0.623255,0.097524,-0.347647,-0.996511,-1.324606,-2.335932,-0.926625,-1.860077,-0.092312,3.130071,-0.592539,1.943278,0.975943,2.700992,-0.012955,-0.198840,-0.302574,-2.434939,4.064993,-2.853976,-0.247977,-0.732944,0.147284,-2.862328,1.557109,-0.086379,-0.457935,2.843510,1.349364,3.437583,2.628947,-1.094329,-0.511704,2.494391,-0.834265,-0.150350,-0.897936,0.834669,2.150526,-1.217850,-1.003721,1.907463,3.420404,1.904817,-2.745724,-0.136817,0.629029,0.145673,-1.057887,-3.511619,2.413882,2.123147,1.446568,-0.755582,-2.629011,1.167078,-1.722541,-0.479486,2.499381,1.923080,-0.658235,0.732462,-1.325626,-1.568405,-0.396202,-2.573920,3.776683,1.007722,-1.524728,-0.013985,1.920946,-0.347539,-0.459710,1.555583,2.953067,1.737514,0.271584,1.061060,0.046440,-0.896566,-1.316923,-1.570372,-1.694058,0.021750,-3.176809,-0.256070,-3.026447,-0.536773,-1.840531,0.291657,1.946297,-3.359914,-1.497288,-1.498007,-0.921404,-0.387647,-1.858063,-0.512559,1.986523,0.288079,-0.998120,0.610858,1.087802,-3.553261,-0.349697,3.973424,0.114715,0.349570,3.152582,-2.409853,1.706118,-0.614637,0.496028,1.205318,-0.415429,-1.272013,1.284034,-0.246123,0.217389,1.192920,1.802596,-0.496453,-1.946512,0.852263,2.621163,-1.239980,0.998877,2.828607,-0.145637,0.661129,-0.220563,-1.849502,-1.601761,-2.461480,-0.336235,3.605740,0.467424,3.256135,-1.796023,-0.998965,3.468606,-2.717916,-2.607543,3.993235,1.969126,0.470418,0.127317,2.231147,1.300137,1.504129,2.872371,2.571698,0.479208,-2.698683,2.740635,-2.003057,-4.986494,0.760433,0.297972,-1.176894,0.298350,2.770504,0.689752,-0.575027,0.209393,-3.317969,-2.977862,-2.138347,-2.288577,4.414963,1.141869,1.976438,-0.578598,-1.463684,1.594133,0.818886,-0.848345,-3.585456};
    const size_t NUM_POINTS = sizeof(DATA) / sizeof(double);


    Gaussian mu(0, 1e-3);
    mu.updatePosterior();
    Gamma gamma(1e-3, 1e-3);
    gamma.updatePosterior();

    vector<Gaussian> x;
    // TODO: try for various parameters

    for (size_t i = 0; i < NUM_POINTS; ++i)
    {
        x.push_back(Gaussian(&mu, &gamma));
        x[i].observe(DATA[i]);
    }

    // doing the updates
    size_t numIterations = 3;
    for (size_t i = 0; i < numIterations; ++i)
    {
        for (size_t t = 0; t < x.size(); ++t)
        {
            // send messages from gamma to all x
            x[t].receiveFromParent(gamma.messageToChildren(), &gamma);
            // send messages from all x to mu
            mu.receiveFromChild(x[t].messageToParent(&mu), &x[t]);
        }
        mu.updatePosterior();

        for (size_t t = 0; t < x.size(); ++t)
        {
            // send messages from mu to all x
            x[t].receiveFromParent(mu.messageToChildren(), &mu);
            // send messages from x to all gamma
            gamma.receiveFromChild(x[t].messageToParent(&gamma), &x[t]);
        }
        gamma.updatePosterior();
    }
    cout << "mean,var:" << mu.moments().mean << " " << 1./ gamma.moments().precision << endl;
    cout << "stdev:" << sqrt(1./gamma.moments().precision) << endl;

}

template <typename T>
inline std::ostream& operator <<(std::ostream &os, const vector<T> &v)
{
    for (size_t i = 0; i < v.size(); i++)
        os << v[i] << "\t";
    return os;
}

template <typename T>
void deleteAll(vector<T*> &vec)
{
    for (size_t i = 0; i < vec.size(); ++i)
        delete vec[i];
}





void trainDirichlet()
{
    const size_t DIMS = 5;
    Dirichlet *dir = new Dirichlet(vector<double>(DIMS, 1));
    vector<Discrete*> lambda;
    for (size_t p = 0; p < 100; ++p)
    {
        lambda.push_back(new Discrete(dir));
        // initialising
        lambda[p]->observe(p % 3);
    }

    const size_t numIterations = 1;
    for (size_t iter = 0; iter < numIterations; ++iter)
    {
        // running the inference
        for (size_t p = 0; p < lambda.size(); ++p)
            dir->receiveFromChild(lambda[p]->messageToParent(dir), lambda[p]);
        dir->updatePosterior();

        for (size_t p = 0; p < lambda.size(); ++p)
        {
            lambda[p]->receiveFromParent(dir->messageToChildren(), dir);
            lambda[p]->updatePosterior();
        }
    }

    cout << expv(dir->moments().logProb) << endl;
    // sanity check
    cout << sumv(expv(dir->moments().logProb)) << endl;

    deleteAll(lambda);
    delete dir;
}


void testGaussianPDF()
{
    Gaussian mu(10, 1);
    for (double x = 5; x < 16; ++x)
        cout << exp(mu.logProbabilityDensity(x)) << endl;
}




void trainMixtureOfUnivariateGaussians()
{
    const size_t INIT_DISCRETE[] = {3,3,4,1,3,4,1,4,4,3,3,3,1,3,2,2,3,4,1,4,4,2,4,2,3,4,2,2,2,3,2,2,4,4,1,4,1,1,1,2,2,4,4,1,2,4,1,1,
                                    1,1,3,1,3,2,2,4,1,2,2,3,3,1,4,2,2,1,2,1,2,4,4,4,1,1,3,1,2,3,1,3,1,2,1,3,2,1,2,3,2,3,2,1,2,2,2,1,
                                    3,1,2,2,3,1,4,4,2,1,3,2,4,3,1,4,3,1,1,4,1,1,3,1};
    const double INIT_DIRICHLET[] = {1.0940674616885, 1.83176174760137,1.42667755173837,1.2569};

    const size_t DIMS = 4;

    Dirichlet *dir = new Dirichlet(vector<double>(INIT_DIRICHLET, INIT_DIRICHLET+DIMS));
    vector<Gaussian*> mean(DIMS, NULL);
    vector<Gamma*> prec(DIMS, NULL);

    for (size_t m = 0; m < DIMS; ++m)
    {
        // TODO: put the first updatePosterior() call into constructor?
        mean[m] = new Gaussian(0, 1e-3);
        mean[m]->updatePosterior();

        prec[m] = new Gamma(1e-3, 1e-3);
        prec[m]->updatePosterior();
    }


    // TODO: this should be done inside of the mixture??
    vector<Discrete*> discr(MIX_NUM_POINTS, NULL);
    vector<MoG*> data(MIX_NUM_POINTS, NULL);
    for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
    {
        discr[p] = new Discrete(dir);
        discr[p]->observe(INIT_DISCRETE[p]-1);
        data[p] = new MoG(mean, prec, discr[p]);
        data[p]->observe(MIX_DATA[p]);
        data[p]->receiveFromParent(discr[p]->messageToChildren(), discr[p]);

        // needs a message from a parent TODO: arrays are indeed necessary
        for (size_t m = 0; m < DIMS; ++m)
            data[p]->receiveFromParent(m, prec[m]->messageToChildren(), prec[m]);
    }


    // doing the inference
    const size_t numIters = 10;
    for (size_t iter = 0; iter < numIters; ++iter)
    {
        // updating the mean components
        for (size_t m = 0; m < DIMS; ++m)
        {
            for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
            {
                data[p]->receiveFromParent(m, prec[m]->messageToChildren(), prec[m]);
                mean[m]->receiveFromChild(data[p]->messageToParent(m, mean[m]), data[p]);
            }
            // TODO: UNIFY computation of the moments() and messageToParents()!
            mean[m]->updatePosterior();
        }
        // updating the precision components
        for (size_t m = 0; m < DIMS; ++m)
        {
            // receive all the messages from data
            for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
            {
                data[p]->receiveFromParent(m, mean[m]->messageToChildren(), mean[m]);
                prec[m]->receiveFromChild(data[p]->messageToParent(m, prec[m]), data[p]);
            }
            prec[m]->updatePosterior();
        }
        // propagating the precision info
        for (size_t m = 0; m < DIMS; ++m)
        {
            Moments<Gamma> msg = prec[m]->messageToChildren();
            for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
                data[p]->receiveFromParent(m, msg, prec[m]);
        }
        // updating the discrete distributions
        for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
        {
            discr[p]->receiveFromParent(dir->messageToChildren(), dir);
            discr[p]->receiveFromChild(data[p]->messageToParent(discr[p]), data[p]);
            discr[p]->updatePosterior();
        }

        // updating the dirichlet
        for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
            dir->receiveFromChild(discr[p]->messageToParent(dir), discr[p]);
        dir->updatePosterior();

        for (size_t p = 0; p < MIX_NUM_POINTS; ++p)
        {
            discr[p]->receiveFromParent(dir->messageToChildren(), dir);
            discr[p]->updatePosterior();
            // updating the data
            data[p]->receiveFromParent(discr[p]->messageToChildren(), discr[p]);
        }
    }


    for (size_t m = 0; m < DIMS; ++m)
        cout << mean[m]->moments().mean << " ";
    cout << endl;

    for (size_t m = 0; m < DIMS; ++m)
        cout << prec[m]->moments().precision << " ";
    cout << endl;

    for (size_t m = 0; m < DIMS; ++m)
        cout << exp(dir->moments().logProb[m]) << " ";
    cout << endl;

    delete dir;
    deleteAll(mean);
    deleteAll(prec);
    deleteAll(data);
    deleteAll(discr);
}







int main()
{
    trainMixtureOfUnivariateGaussians();
//    trainDirichlet();
    return 0;
}

